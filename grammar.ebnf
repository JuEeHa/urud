@@grammar :: Urud

@@eol_comments :: /#.*?$/

@@keyword :: let fun interface if then else

start = {definition}* $;

@name
identifier = /(?!\d)\w+/;

unbound_type = '*' identifier;
type = type '<' type {',' type}* '>' | (identifier | unbound_type) '[' identifier {',' identifier} ']' | unbound_type | identifier;

literal = integer_literal | string_literal;
integer_literal = /[-+]?[\d]+/;
string_literal = "'" /([^'\\]|\\.)*/ "'";

function_call = atom '(' [expression {',' expression}*] ')';

if_operator = 'if' expression 'then' {statement}* 'else' {statement}* ';';
addsub_operator = muldiv_operator {('+' | '-') muldiv_operator}*;
muldiv_operator = atom {('*' | '/') atom}*;

atom = function_call | '<' type '>' '(' expression ')' | literal | identifier | '(' expression ')';

expression = if_operator | addsub_operator | atom;

statement = expression | definition;

variable_definition = 'let' identifier '=' expression;

function_definition = 'fun' identifier '(' [type identifier {',' type identifier}*] ')' {statement}* ';';
function_prototype = type identifier '(' [type {',' type}*] ')';

interface_definition = 'interface' identifier unbound_type {function_prototype}* ';';

definition = variable_definition | function_definition | interface_definition;
