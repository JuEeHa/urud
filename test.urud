interface Summable *a
	*a sum(*b[Collection]<*a>);

interface Collection *a
	*b head(*a<*b>)
	*a<*b> tail(*a<*b>)
	Bool empty(*a<*b>)
	Int length(*a<*b>);

# Implement interface Summable for types implementing interface Number
fun sum(*b[Collection]<*a[Number]> numbers)
	fun sum_helper(*b<*a> numbers, *a tally)
		if empty(numbers) then
			tally
		else
			let number = head(numbers)
			let rest = tail(numbers)
			sum_helper(rest, tally + number);;
	sum_helper(numbers, <*a>(0));

fun foofun(Int a, Int b)
	fun barfun(Int x) 4 + x;
	let foovar = barfun(a)
	foovar * b;

fun average(*b[Collection]<*a[Number]> numbers)
	sum(numbers) / <*a>(length(numbers));

let foo = 3 - 2 * (1 + 1) / 4 + 6
let bar = foofun(foo, -4)

let foostring = 'Hello world!'
let barstring = '  hi?'
#Comment
let bazstring = '#Not comment'
let quxstring = '\'recursion\''
